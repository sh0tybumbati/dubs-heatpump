name: Build Mod

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Create stub DubsBadHygiene assembly
      run: |
        mkdir -p lib

        # Create stub types for DubsBadHygiene that this mod depends on
        cat > DubsBadHygiene_Stub.cs <<'EOFSTUB'
        using System.Collections.Generic;
        using Verse;
        using RimWorld;

        namespace DubsBadHygiene
        {
            public class Building_AirconUnit : Building
            {
                public override void SpawnSetup(Map map, bool respawningAfterLoad) { }
                public override void TickRare() { }
            }

            public class Building_AirconOutdoorUnit : Building
            {
                public CompAirconBaseUnit compAirconBaseUnit;

                public override void SpawnSetup(Map map, bool respawningAfterLoad) { }
                public override void TickRare() { }
                public virtual string GetInspectString() { return ""; }
            }

            public class CompAirconBaseUnit : ThingComp
            {
                public List<Thing> ConnectedUnits = new List<Thing>();
            }

            public class CompAirconUnit : ThingComp
            {
            }

            public class CompPipe : ThingComp
            {
                public PipeNet pipeNet;
            }

            public class PipeNet
            {
                public PipeType pipeType;
                public float AvailableWater;

                public void DrawWater(float amount) { }
                public float AddHydrogen(float amount) { return 0f; }
                public float AddOxygen(float amount) { return 0f; }
            }

            public enum PipeType
            {
                Water,
                Oxygen,
                Hydrogen
            }

            public class CompPowerTrader : ThingComp
            {
                public bool PowerOn { get; set; }
            }

            public class CompFlickable : ThingComp
            {
                public bool SwitchIsOn { get; set; }
            }
        }
        EOFSTUB

        # Compile the stub assembly
        dotnet new classlib -n DubsBadHygiene -o DubsBadHygiene_Temp -f net472
        rm DubsBadHygiene_Temp/Class1.cs
        cp DubsBadHygiene_Stub.cs DubsBadHygiene_Temp/

        # Add RimWorld references to stub project
        cat > DubsBadHygiene_Temp/DubsBadHygiene.csproj <<'EOFCSPROJ'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net472</TargetFramework>
          </PropertyGroup>
          <ItemGroup>
            <PackageReference Include="Krafs.Rimworld.Ref" Version="1.5.4104" />
          </ItemGroup>
        </Project>
        EOFCSPROJ

        cd DubsBadHygiene_Temp
        dotnet build -c Release
        cp bin/Release/net472/DubsBadHygiene.dll ../lib/
        cd ..
        rm -rf DubsBadHygiene_Temp DubsBadHygiene_Stub.cs

    - name: Convert project to SDK-style with RimRef
      run: |
        cd Source/DubsHeatPumps

        # Backup original files
        cp DubsHeatPumps.csproj DubsHeatPumps.csproj.bak

        # Create SDK-style .csproj with RimRef
        cat > DubsHeatPumps.csproj <<'EOFPROJECT'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net472</TargetFramework>
            <OutputPath>../../Assemblies/</OutputPath>
            <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
            <DebugType>none</DebugType>
            <LangVersion>latest</LangVersion>
            <RootNamespace>DubsHeatPumps</RootNamespace>
          </PropertyGroup>

          <ItemGroup>
            <PackageReference Include="Krafs.Rimworld.Ref" Version="1.5.4104" />
            <PackageReference Include="Lib.Harmony" Version="2.3.3" />
          </ItemGroup>

          <ItemGroup>
            <Reference Include="DubsBadHygiene">
              <HintPath>../../lib/DubsBadHygiene.dll</HintPath>
              <Private>False</Private>
            </Reference>
          </ItemGroup>
        </Project>
        EOFPROJECT

    - name: Restore dependencies
      run: |
        cd Source/DubsHeatPumps
        dotnet restore

    - name: Build
      run: |
        cd Source/DubsHeatPumps
        dotnet build -c Release --no-restore

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: DubsHeatPumps-dll
        path: Assemblies/*.dll
        if-no-files-found: warn

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Assemblies/*.dll
          About/**
          Defs/**
          README.md
          LICENSE
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
